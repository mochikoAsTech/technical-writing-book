= エンジニアのためのテクニカルライティング

文章を書いているエンジニアのみなさんへ
仕様書、設計書、技術ドキュメント、会社やチームに新しい人が入ってきたときのための技術研修資料、オンボーディング資料
会社あるいは個人の技術ブログ、Qiita、Zenn、技術書や技術雑誌の記事
みなさん、やっぱり技術に関する文章は、色んな場面で書いている

文章を書いているエンジニアからテクニカルライターによくいただく質問：
もっと文章をうまく書けるようになりたいです！どんなことに気をつけて書いたら、文章力が上がりますか？


言いたいことと、「これを言いたいのかな？」と相手が察することを素早く近づける

== 先に大枠を説明して段々詳しくしていこう

まずは大枠を説明しましょう。先に細かい部分を話し出すと、全体像が分かっていないので混乱します。

ババ抜きの説明をするなら、「トランプというカードを使って2人以上でやるゲーム」辺りから説明をはじめます。いきなり「順番にカードを抜いていく」とか、「ババを引いたらだめ」といった細部から話すと、ババ抜きを知らない人は混乱します。

== 最後まで読んでもらえない方がいい、こともある

その人が問題を解決できればいい、答えを見つけて手を動かす作業に戻れればいいので、全文を最後まで読まれないことが正義のこともある。

最短経路で「ここには欲しい情報がない」「自分はこれを読まなくていい」を判断できるようにしておこう。

== 早めにふるい落とそう

100人の読み手がいて、ここに書いてある情報を必要としている人はそのうち1人しか居なかった場合に、100人が最後まで読んでしまうと相当な労力が無駄になる。（@<img>{flow}）

//image[flow][読む読まないの離脱フロー][scale=0.8]{
//}

全体の「読む」労力ができるだけ少なくなるよう、早めに「できるだけたくさんの人が該当する分岐」でふるい落とそう。

読み進むべきか、読まなくていいのか、早めに判断させてあげよう。

最初に「これはマネージャ以上の管理職に向けたお知らせです」と書いてあれば、その時点で9割が離脱できる。

みんなの時間を無駄に使わない。

== 期待値コントロールをしよう

文章に対する一番のヘイトが生まれる原因は、その文章の善し悪しとは別に「期待していた内容じゃなかった」である
どれだけ美味しいめんつゆでも、麦茶だと思って飲んだ人からすると吹き出すくらいひどい味に感じられる

== 何をしてほしいのか最初に書こう

これを読んで、いつまでに何をして欲しいのかを最初に書こう。

「急に知らせてびっくりしないよう、事前告知で概要を先出ししてるだけなので、現時点でやって欲しいことは特にないよ」を最初に書いておく。


== 要約文ではじめよう

最初に要約文を書いておく

== 既知から未知に繋ごう

知っていることから、知らないことへ、順番に負荷を上げていこう。

== 1つの段落では1つのことを話そう

1つの段落に2つの情報を詰めない



== 勘違いを捨てよう

次のような勘違いを捨てて、

 * 私が読んで分かるんだから、他の人が読んでも分かるはずだ
 * ちゃんと読んでくれないから伝わらないんだ

== 一度に把握できることは7つまで

短期記憶は7つまで


== まずは「分かりやすい一文」を書けるようになろう

タマネギのみじん切りができないのに、いきなりハンバーグに挑戦するのはやめろ
段階的に難しくなっていくので、段階的にできるようになっていこう

== 分かりやすい一文を見つけるために

早くたくさんのパターンを書いて、最善手を見つける
100点を思いつくまで書かないのではなく、思いつくままにたくさんのパターンを書いていく
改善案を思いついたら直前の案をコピペして別の案として書く
とにかくナンバリングしながら全部の案を並べていく
1番良い物を見つける

== 漕ぎ始めを生成AIにサポートしてもらおう

使えるならChatGPTでもGitHub Copilotでもなんでも使う。
自転車はこぎはじめがしんどい。文章も同じで、初案を書く作業がしんどい
既にある文章を読んで、あーだこーだ文句を付けながら手直ししてく方がラク

ゴミみたいな初案を自分で作れるならそれでもいいけど、「こんな話を書きたい」というのを言ってChatGPTにゴミみたいな初案を作ってもらうのもあり
漕ぎ始めだけやってもらうと、スピードがのった状態で手直しから入れるからラク

== 意味のない空白や意味のないスペースを残すな

「なぜここに空白？敢えて？」となるので、意味のない謎の改行やスペースを残さない
「なんでここはこうなの？」と聞かれたら全部理由が言えるようにしておこう

== 単語で終わらせない

「確認」じゃなくて「確認した」なのか「自分が確認する」なのか「相手に確認してもらう」なのか
「事前告知」じゃなくて「事前告知をした」なのか「事前告知をする」なのか最後まで書く

「説明がうまい人」とかどういう人のことか？
「話したいこと」を「話したい順番」で好きに話す人手はなく、
「相手の聞きたいこと」を「相手の関心度が高い順番」で話して、早く疑問を解消してあげる人

== 文章と修飾を分けて書こう

Markdown記法のように、文章そのものと、文章の修飾を分けて書こう。
WordとかCMSみたいに、文章そのものと修飾が分かちがたく1つになっていると後で再加工が辛い。

== 再利用しやすいテキストにしよう

再利用しやすい、再加工しやすいテキストにしよう。
箇条書きに・をつかっていると、「マークダウンに変換しよう」と思ったとき、箇条書きでないところ「りんご・バナナ・いちご」も誤変換されてしまう。

== 並列をナカグロで書くと、後の変更で箇条書きにしたとき見た目が変になる

・生命・身体・健康に影響を与えるもの
・投資・資産運用に関連するもの
・クラウドファンディング・寄付・投げ銭に類するもの
・ヒーリング・セラピーに類するもの
・自己啓発に類するもの
・メンタルヘルスに関連するもの
・宗教・スピリチュアルに関連するもの
・政治に関連するもの
・アカウントと関連のないプランを提供するもの

== 語順を入れ替えよう

より分かりやすい語順がないか考えてみよう。

== 修飾語はかかる言葉に近づけよう

修飾語は近づけよう。

誤解の少ない文章にする特効薬は、一文を短くすること。複数の修飾が延々と続くような説明はやめて、一文ごとに句点で終わらせる。


一文を考える
一段落を考える
一ページを考える
一章を考える
一冊を考える
ドキュメント全体を考える
段々と難しくなっていく

== タイトルは「概要」にすべきか、「○○の概要」にすべきか

上位のタイトルを見れば補完されて分かるけど、私はタイトルだけで分かるようにしたいので「○○の概要」派です

== 分からないから説明を読むが、分からないと読めない

「返ってきたパケットがTLS/SSL recordではないってことですよ」
「え、どういうこと…？（しばらく調べる）あー！返ってきたパケットがTLS/SSL recordではないってことか！」
すごい！さっきまで分からなかった文章が分かるぞ！
分からないから説明読むんだけど、説明は分かんないと読めなくて、分かると読めるんだよな。

== 年月日を書け

すべてのドキュメントは、文脈とか前後とかを把握されずに突然そこだけ読まれると思った方がいい
順を追って読んでほしい、前後をコントロールしたいなら「本」にする

誰に向けた文章なのか、読むとどうなれるのか、冒頭にゴールを書いておく

== 同じものは同じ名前で呼ぼう

いままでのものが「A」に変わったら、「いままでのもの」をなんて呼ぶのか考えよう

同じものを安否確認サービスと安否確認システムと緊急時安否確認アラートみたいに色んな名前で呼ばない。
検索したときに、完全一致じゃないと引っかからない検索システムでも引っかかるように。
あとバラバラの名前だと修正時に漏れる。

== 正しい名前で呼ぼう

iPhoneをiphoneと書くとか、JavaScriptをjava scriptと書くとか、

== 箇条書きを挟んだ文章を作らない

私がやりたいことは

 * A
 * B
 * C

の3つです。

みたいに書かない。

== 主語と述語を対応させよう

主語と述語のねじれを見つけよう。

== 「自分」という主語に注意しよう

カメラマンから「写真を撮るときは鏡に映った自分の目を見てください」と指示されたら、あなたは誰の目を見ますか？この指示文は、次の2つの解釈が可能です。

 * 写真を撮るときは、鏡に映ったカメラマンの目を見てほしい
 * 写真を撮るときは、鏡に映った自分自身の目を見てほしい

自分という一人称が指すものは、「私」であることも「相手」であることもあります。

== 一文を短くしよう

「〜ので」「〜し」

文章が長くなるときは、箇条書きを使って分けてみよう。
表を使ってもいい。

== ひらがなに開こう

一方で、漢字にしないと意味が即座に取れずに返って分かりにくいものもある。


== 分かったと分からないの両方の気持ちが必要

分かんない人の気持ちも分からなきゃいけないし、分かんない人に教えられるだけの理解度もいる

== 結論を先に言おう


結局何をすれば良いの？
棚卸しのお願いというメールが来て、対象となる資産の一覧や、自分が貸与されている資産の一覧を見る方法は書いてあるが、結局いつまでになにをすればいいのか、なにをやったら終わりなのか、自分は対象者なのかが分からない。

今すぐ何かをして欲しいのか、今やれることは何もないから事前告知として聞くだけ聞いておいてほしいのか、何かしら準備をして欲しいのか、これを「どういう気持ちで読めばいいのか」を先に説明して欲しい。なんだか言わずにいきなり「食べて！ほら食べて！」とスプーンを差し出されると、「え、なになになに？」となって怖い。

== リンク名称を「こちら」にしない

可能ならURLは全部書く
コピペしたときに、テキストとして貼り付けると情報が失われることがある
あとリンク先が間違っていたときに、リンクテキストが書いてあることで間違いに気づける
リンクを開く前に、なにに飛ばされるのか判別できないので、見るべきか見なくていいのか分からない 

たとえば利用規約など同意必須の内容を「こちら」をリンクにして参照させていた場合、何かでAタグが外れたり、プレーンテキストとしてコピペして別の場所で使われた際に意図せずリンク情報が消えることがある。
URLをそのまま書いていれば、少なくとも自力でURLを開いて参照できる。

== 一文の中で同じことを二度言わない

「俺が避けるべきだと思う実装は、こういうのやああいうのは避けるべき」みたいに、文章として崩壊していないか確認しよう。

== 時刻の表記はJSTか

時刻の表記はJST？UTC？

== その「文字数」って何文字ですか？

文字数の上限を示すときは、カウント方法をちゃんと書こう。
半角は1文字分？全角なら2文字分？それとも1文字は1文字？絵文字は何文字？

== 以上と以下か、より大きいと未満か

上限や下限の数字を示すときは、「以上」なのか「より大きい」なのか、「以下」なのか「未満」なのかを明示しよう。



Textlint



文章を書き始める前に、構造を考えよう

「要はなんだ？」
格好良く、美しく、ちゃんとした日本語で、でも意味は1つもわからん、ということはある。
https://www.itmedia.co.jp/news/articles/2205/10/news123.html



== 「教えてあげる」ことに酔わないこと

「教えてあげる」「話を聞いてもらう」のは基本的に気持ちがいいことなので、酔わないように気をつける。
色々アウトプットをしているように見えて、実際はここ10年同じことを繰り返し言っているようだと、苦しみながら新しいものを学ぶという楽しい時間を逃しているかもしれない。

== そこにあることを気付いて辿り着いてもらわないと意味がない

いくら分かりやすいドキュメントがあっても、どこにあるのか分かりにくいと意味がない。
届かなければ意味がない。

よく読めば分かるでしょ、というのは提供する側の傲慢さで、人はできれば文章なんか読みたくない。
だから「今北産業」があるのだ。

最初の2、3行を読んで「ここにはなさそう」と思われたら、そこで大方の人間が離脱する。

困っている人は困っているので割と最後の方まで熱心に読んでくれるけど、熱心に読んだ挙げ句に欲しい情報が手に入らないと怒り狂う。

== 変わっていく「語感」を捨て置かずに拾おう

若い世代に「1時間弱」は何分ぐらいか？と聞くと、「1時間が60分、60分とちょびっとだから70分くらい？」と答えるらしい。まさか、と思って息子に聞いたら、その通りに答えた。

その理屈でいくと「1時間強」は何分くらいになるのか？と聞いたところ、「60分と結構たくさんくらいなので、85分くらいとか？」らしい。なるほど。同じ理屈で大さじ1杯弱も「大さじ1杯＋ちょっと」だと思っていたとのこと。

本来の解釈は伝えたが、こういう「口に出さない誤解」は周囲も誤解に気付かないので解くのが難しい。

言葉の本来の意味は辞書に載っていますが、その言葉から受け取る「こんな感じかな」という語感は、人や世代によって移り変わっていきます。

学校で先生に当てられて答えを言ったとき、先生から「はい。結構です」と止められたら、「満足しました。そこまでで十分ですよ」というプラスの意味で受け取るか、「もういいです。それ以上聞きたくありません」というマイナスの意味で受け取るかは、人に寄って異なると思います。

正しい意味はこれなんだ！誤解した意味で受け取る側が悪い！日本語をちゃんと勉強しろ！と怒る気持ちも分かりますが、誤解する人が2割、3割を増えていってもなお、書き手が頑なにその存在を無視し続けるのはよくありません。

誤解する人が多いと分かった時点で、「1時間弱というのは本来は1時間より少し少ないという意味です」というような補足を入れてあげるか、曖昧な言い方をやめて「45分～60分」のように誤解されない言い方に直してあげましょう。

== 見つけやすくたどり着きやすいドキュメントにしよう

「メンテナンスされていないものも含めて、ドキュメントがとにかく大量にある」状態は、「ドキュメントがまったくない」状態よりも人を混乱させることがあります。ドキュメントはあればあるほどいいというものではなく、メンテナンスを怠ればコードと同じようにドキュメントも負債化します。

お知らせや告知、社内資料があまりにも多すぎて、とてもたどり着けない、アクセシビリティが低い状態では、ドキュメントはその良さを発揮できません。

良い文章を書くことと同じくらい、その文章を見つけやすくたどり着きやすい状態にしておくことが大切です。

== リンクは「張る」ものか「貼る」ものか

蜘蛛がこちらからあちらへ糸を張るように、他の情報と繋ぐためのリンクなので、個人的にはリンクは「張る」を使っています。

URLをコピーペーストするイメージで「貼る」を使いたくなるかもしれませんが、Slackでリンクを教えてあげるときは「URL貼っときますね」だし、「商品一覧から詳細ページにリンクを張る」ときは「張る」だと思っています。

@<href>{https://twitter.com/mainichi_kotoba/status/1769229909283778901}

== 「無駄なことをしたくない」から何もしないと何も書けない

