= エンジニアのためのテクニカルライティング

仕様書、設計書、手順書、オンボーディング資料、ドキュメント、技術ブログ、技術書など、エンジニアが技術に関する文章を書く場面はたくさんあります。分かりやすい文章を書くために、筆者が日々実践していることを紹介します。

//pagebreak

== 必要ない人に無駄に文章を読ませない

小説であれば、読みはじめてすぐに「もういいや」と読むのをやめてしまうつまらない話よりも、最後の1文字まで読者を惹きつけて離さない面白い話の方がいいはずです。ですが実用文においては、読んだ人が「私は何をどうすればいいのか」という答えを見つけて、やるべき作業に早く進めた方がいいので、@<ttb>{最後まで読んでもらえないのはいいこと}なのです。

=== 読者層を決めてから書こう

万人に最適な文章というものはありません。読む人が変われば、「分かりやすい文章」も変わってきます。

たとえばDNSに関する技術書を書くとしても、対象となる読者層が「インターネット？ほぼ使ってないです。インスタは使ってますけど」というレベルの大学生なのか、それとも「Aレコードは登録したことあるけどフルリゾルバは知らないです」というレベルのエンジニアなのかによって、書くべき内容や説明方法は大きく異なります。

あなたが@<ttb>{これから書く文章は誰に向けたものなのか}を最初にしっかり決めておかないと、のちのち「どこまでさかのぼって説明しないとだめなんだ……？」と頭を抱えることになったり、あるいは読者に「こんな簡単なことはもう知っている。もっと踏み込んだ内容が読めると期待していたのに」と不満を持たれたりします。

どれだけ美味しいめんつゆでも、麦茶だと思って飲んだ人からすると吹き出すくらいひどい味に感じられます。文章を読み終わったときに、文句を言いたくなったり低評価を付けたくなったりするいちばんの動機は「思っていたものと違った」です。読み終わってから残念な思いをさせないよう、書く前に想定の読者層をはっきりさせておきましょう。

=== 関係ない人を早めにふるい落とそう

100人の読み手がいて、そこに書いてある情報を必要としている人はそのうち1人しか居なかった場合に、100人が最後まで読んでしまうと相当な労力が無駄になります。たとえばマネージャ以上の管理職に対して組織の目標設定を促すお知らせがあった場合、最初に「これはマネージャ以上の管理職に向けたお知らせです」と書いてあれば、その時点で管理職ではないほとんどの人が離脱できます。（@<img>{flow}）

//image[flow][読む読まないの離脱フロー][scale=1]{
//}

一通り読んだ後で、ようやく自分には関係のない話だと気付いたときの「関係ないなら早くそう言ってよ！」という徒労感には誰しも覚えがあるはずです。このまま読み進むべきか、自分には関係ないので読まなくていいのかを判断できる情報を早い段階で提示するようにしましょう。

みんなの時間を無駄に使わないことはコスト削減でもあります。組織全体の「読む」労力ができるだけ少なくなるよう、早めに@<ttb>{できるだけたくさんの人が該当する分岐}で読み手をふるい落としましょう。

=== 想定する読者層とゴールを明示しておこう

関係ない人を早めに振い落として残念なミスマッチを防ぐ簡単な方法は、本文の前に「想定する読者層」と「ゴール」を書いておくことです。たとえば筆者が以前書いた「SSLをはじめよう」という書籍では、想定する読者層を次のように定義していました。

//cmd{
本書は、こんな人に向けて書かれています。

 * よく分からないままネットの手順通りにSSLを設定している人
 * 「サイトをHTTPS化したいな」と思っている人
 * 証明書の購入や設置の流れがいまいち分かっていない人
 * SSLとTLSの関係性がよく分からない人
 * SSL証明書が一体何を証明しているのか知らない人
 * これからシステムやプログラミングを学ぼうと思っている新人
 * ウェブ系で開発や運用をしているアプリケーションエンジニア
 * 「インフラがよく分からないこと」にコンプレックスのある人
//}

想定読者を明示しておくことで、ここに当てはまらない人は本文を読む前に「自分が期待している内容ではないかもしれない。読もうかと思ったけどやめておこう」と判断できます。ここでさらにもう一歩踏み込んで「マッチしない読者層」も書いておくと、「あ、これは自分向けではないんだな」に気付いて、よりミスマッチが防ぎやすくなります。

//cmd{
本書は、こんな人が読むと恐らく「not for meだった…（私向けじゃなかった）」となります。

 * SSL/TLSの通信をC言語で実装したい人
 * 「プロフェッショナルSSL/TLS」を読んで完全に理解できた人
//}

また「SSLをはじめよう」ではゴールを次のように定義していました。

//cmd{
本書を読み終わると、あなたはこのような状態になっています。

 * SSL証明書がどんな役割を果たしているのか説明できる
 * 証明書を買うときの手順が分かっている
 * 意図せず「保護されていない通信」と表示されてしまったときの対処法が分かる
 * 障害が起きたときに原因を調査できる
 * 読む前よりSSLが好きになっている
 * SSL/TLSと併記されている「TLS」の意味が分かっている
//}

このようにゴールを書いておくことで、読み手は「読むことで何が得られるのか」を事前に把握できます。ざっと概要だけ知りたいのか、手を動かして実践的な知識を得たいのか、文章を読む目的は人によって異なります。

@<ttb>{最初に「想定する読者層」および「マッチしない読者層」、そして「ゴール」を書いておく}ことで、不幸なミスマッチをできるだけ防ぎましょう。これらを書いておくと、著者自身が方向性を見失いかけたときに「これって誰に向けた文章なんだっけ？」「読み終わったらどうなってて欲しいんだっけ？」と振り返る拠り所にもなります。

=== いつまでに何をしてほしいのかを書こう

ある日、会社であなたに「情報資産の棚卸しのお願い」というお知らせが届いたとしましょう。

お知らせには棚卸しの対象となる資産や、自分が会社から貸与されている資産の一覧を見る方法などが詳しく書いてありますが、結局いつまでに何をすればいいのかや、そもそも自分がこの棚卸しという作業をしなければいけない対象者なのか否かはまったく分かりません。色々と人に聞いたり調べたりした結果、もうすぐ年1回の棚卸しの時期がくるので事前告知として概要を先出ししていただけで、現時点はやるべきことやできることは何もない、ということが分かり、あなたには徒労感だけが残りました……。

仕事をしていると、こんなお知らせは実際によくありますよね。文章を書くときは、これを誰に読んでもらって、いつまでに何をして欲しいのかを最初の方に書きましょう。

このお知らせが届いた人全員に今すぐ何かをしてほしいのか、それともリンクを踏んでもらって貸与されている資産があった人にだけ何かをしてほしいのか、はたまた今やれることは何もないから時間のある人に事前告知として把握しておいてほしいのか、いったいこの文章を「どれくらいの優先度で読めばいいのか」を先に説明してあげましょう。

何の食べ物だか言わずにいきなり「食べて！ほら食べて！」とスプーンを差し出されると、「え、怖い。なになになに？」となって、とても素直に口を開く気にはなれませんし、食べたところで猜疑心で味もよく分かりません。そんなときは「初めて作ったプリンが思いのほか美味しくできたので一口食べて感想を教えてほしい」というように、どういう意図で読み手に何をして欲しいと思っているのかを先に説明してあげる必要があります。

文章も同じで「読んで！さあ読んで！」と要求する前に、これを読んで@<ttb>{いつまでに何をして欲しいのかを提示してあげる}必要があります。

== 文書構造や文章量が適切だと分かりやすい

文章は、文章そのものの読みやすさに加えて、読む順番や量によっても分かりやすさが変わってきます。読み手に合わせた適切な文書構造や文章量にしましょう。

=== 大枠からはじめて段々細かくしていこう

文章で何かを説明するときには、@<ttb>{先に大枠を理解してもらい、それから段々細かい内容にしていく}という順番を意識しましょう。

たとえばババ抜きの説明を書くのであれば、「トランプを使うゲーム」「2人以上でやる」といった大枠（前提）をまず書きます。その上で、「同じ数字のカードは2枚を1組にして場に捨てられる」「カードの中に1枚だけジョーカーがある」「順番に隣の人のカードを引いていき、最後まで手元にジョーカーが残った人が負け」というゲームのルールを書きます。そして最後に「どれがジョーカーか悟られないようにポーカーフェイスを保つことが大事」のような補足情報を添えます。

この大枠からはじめるという順番を無視して、いきなり「ババ抜きから派生したゲームでジジ抜きもある」のような細かい話から書いてしまうと、読み手は全体像が分かっていないので混乱します。

また「大枠からはじめて段々細かく」という順番で書いておくことで、時間のない人は前半だけざっと読んで「あとは実際にやりながら覚えていこう」というように後半の補足情報を読み飛ばすことができます。

=== 一文の長さは一口で食べられる量にしよう

この「長くて分かりにくい文章の例」を読んでみてください。

//cmd{
まず、事前に確認しておきたいのですが先週金曜の16時の定例のミーティングで話に上がっていた方針で間違いはないと思うのですが、興味深い内容がありましたのでその際にもおつたえしたとおりその件につきまして理解したとおりの見解を共有させていただければという意図です。既存仕様と異なると考えられる理由としてはほとんどの機能がメインケースとサブケースを切り分けて動作していないので意図と異なる動きになりユーザーが混乱すると考えているため、リジェクトの可能性もあるので回避のために僭越ながら先方への回答は迅速に行ないたいと思っています。
//}

我ながらすばらしくひどい例ができてしまいました。目が滑って全然頭に入ってきません。理解しようとして3回くらい読み返しましたが、読み返してもなお何を言っているのかさっぱり分かりません。

文章の「一文」は、食事の「一口（ひとくち）」と同じようなものです。句点（。）までの一文は、食事における一口分と同義なので、一口があまりに大きいと口の中いっぱいに食べ物を詰め込んでいるような状態になります。大きすぎる一口は、口の中で延々ともぐもぐ咀嚼する必要があり、いつまでたっても飲み込めません。（@<img>{bite}）

//image[bite][一文を短くすれば理解しやすい][scale=1]{
//}

一文の長さは、一口で食べられるくらいの量（短さ）にしてください。具体的に言うと、以下のような接続詞が出てきたらそこを「です」や「ます」にして、文章を切りましょう。

 * ～ですが
 * ～ので
 * ～し
 * ～して
 * ～ため

これくらいなら大丈夫かな、それとも長いだろうか……と迷ったときは、その一文を声に出して読んでみましょう。前述のひどい例で試してみると分かりますが、長すぎる文章は一息で喋れません。途中で息継ぎをするはめになったら、その一文は長すぎると判断してください。

=== 既知から未知に繋ごう

文章を書くとき、「大枠から詳細へ」の他に意識すべきもう1つの順番は「既知から未知へ」です。

技術ドキュメントを読んでいても、最初から知らない単語や知らない概念ばかりが次から次へと出てくると、「知らないことについて説明してくれているけど、その説明がまず分からない」という状態になります。まずは読み手がすでに知っていることから始めて、段々と知らないことに繋げていきましょう。

たとえばあなたが実家に帰ったとき、親から「こないだ、桜井さんちのりおちゃんが広場に行こうとして転んじゃって手当てしてあげたのよ」と言われても「まず誰だよ、桜井さん……どこだよ、広場って……」となり、肝心の「りおちゃんが転んだ」という情報が頭に入ってきません。

まずは「中学3年生のとき、あなたの同級生に桜井さんっていたでしょ？覚えてる？」という既知の情報から始めて、「ああ、桜井さんね。覚えてる」となったところで、「桜井さんって何年か前に結婚してお子さんも生まれたの。いま子供が夏休みだからって実家に帰ってきてるのよ」と新しい情報を分かりやすく提示し、最後に「お子さんの名前がりおちゃんって言うんだけど、その子がこの間、向かいにある公園の広場に行こうとしてうっかりうちの前で転んじゃったから手当てしたのよ」と繋げれば、情報がきちんと頭に入ってくるはずです。

未知の事柄の上にさらに新しい情報を重ねようとすると、ぐらぐらと不安定な積み木の上にさらに新しい積み木を載せようとしているような状態なので、知識が脳内で安定せずにどんがらがっしゃーんとすべて崩壊してしまいます。

まずは@<ttb>{知っていることからはじめて段々と知らないことへ}、認知の負荷は順を追って少しずつ高くしていきましょう。

=== 1つの段落では1つのことだけ書こう

人はみんな忘れる生き物です。2時間観た映画がとても面白かったとしても、終わった後に主人公の名前が思い出せない、みたいなことはざらにあります。

しっかり分かってほしいからこそ、あれこれも色々書きたくなってしまうのですが、いま書いているこの段落でつたえたいことは何だったかを考えて、@<ttb>{1つの段落に書くことは1つだけ}に絞りましょう。言いたいことを絞り込みきれずに色々詰め込んでしまった文章を読むと、読み手は読み終わったときに「なんか色々書いてあったけど、結局何が言いたいのかよく分からなかった……」という状態になります。

もし1つの段落で2つのことを混ぜて説明していたら、それは2つの段落に分ければいいだけです。

=== 一度に把握できることは7つまで

コース料理の最後にデザートの案内をされたとき、「デザートは10種類ございます。チーズケーキ、ピスタチオとナッツのタルト、ガトーショコラ、梨とキャラメルのアイス、抹茶のティラミス、マンゴーのクレープ、ベリーのクラフティ、イチゴのブラマンジェ、メロンのカタラーナ、アールグレイと豆乳のシフォンからお選びいただけます」などと言われたら、どれにするか決めようにも全種類を把握できずに、「チーズケーキとガトーショコラと……アイスは……何と何でしたっけ？」と聞いてしまうはずです。

このように人間の短期記憶で覚えていられる情報には限りがあり、@<ttb>{一度に把握できるのは多くても7個}程度です。それ以上あると「いっぱいありすぎてよく分からない」という状態になるので、箇条書きや項目の数は7つ以内にしましょう。

数があまりに多い場合は、まず項目を階層化しましょう。前述のデザートの例なら「デザートは温かいものと冷たいものがそれぞれ5つずつあります」で一度分岐させてから、選んだ方の5種類を提示することで把握がしやすくなります。

=== 最新のドキュメントが埋もれないようにしよう

メンテナンスされていないものも含めて、ドキュメントがとにかく大量にあるという状態は、ドキュメントがまったくない状態よりも余計に読み手を混乱させることがあります。ドキュメントはあればあるほどいいというものではなく、メンテナンスを怠ればコードと同じようにドキュメントも負債化します。新しいものと古いものが混在しているアクセシビリティが低い状態では、折角書かれたドキュメントもその良さを発揮できません。

ドキュメントはできるだけGitなどでバージョン管理できる状態にして、「本当に必要なもの」と「古い情報だが取っておきたいもの」が同じ場所に雑然と置かれていることのないようにしましょう。

たとえば情報共有サービスのesa@<fn>{esa}には、「アーカイブ」という機能があります。古い情報だが念のため取っておきたい記事はアーカイブしておくことで、その記事の検索順位を落とすことができます。

//footnote[esa][esa - 自律的なチームのための情報共有サービス @<href>{https://esa.io/}]

買ったばかりで状態のいい服と、穴が空いていたり毛玉がひどかったりで着られない服がタンスにぐちゃぐちゃに詰まっていると、出掛ける前にさっと服を選ぶことができません。良い文章を書くことと同じくらい、その文章を@<ttb>{見つけやすくたどり着きやすい状態}にしておくことが大切です。

== 書く速度を速くするためにできること

書く速度が速いとそれだけ見直しやレビューに時間がかけられるので、最終的にできあがる文章の品質も上がります。「書くぞ！」と思ってから文章を書き上げるまでのスピードを速くするコツがいくつかあります。

=== 書きはじめの遅さは生成AIにサポートしてもらう

自転車は漕ぎはじめはペダルが重くてしんどいですが、速度が乗ってくれば少しの労力でぐいぐい進みます。文章も同じで、0から書く部分がいちばん重労働で時間がかかります。大抵の人は0から作るよりも他人が作ったものにああだこうだ文句を付ける方が圧倒的に得意なので、書きはじめが遅い人はそこだけ生成AIにやってもらう、という方法がお勧めです。

文章を書こうと思ってパソコンの前に座ったが、どうも書きあぐねている……というときは、雑な指示をChatGPTに出したり、GitHub Copilotの提案に身を委ねたりして、低品質でいいので初案を作ってもらいましょう。（@<img>{chatgpt}）

//image[chatgpt][雑な指示を出してChatGPTに初案を書いてもらう][scale=1]{
//}

出来上がった初案を読んで「これ、私の言いたいこととはちょっと違うし、あれこれ間違っていてひどいな」と思ったらしめたものです。そうじゃなくてこうだよ、とサクサク手直しをしていきましょう。悩むばかりで1文字も進まないよりは、ずっと速くあなたの文章ができあがるはずです。

=== 長文を書きたいならまずは一文から

包丁すら握ったことがない人が、いきなりフレンチのフルコースを作ろうとすれば大抵は失敗します。それと同じで、短い文章すら書き慣れていないのにいきなり壮大なドキュメントを書こうとすると、うまくいかずにやたらと時間がかかってしまいます。

まずはトマトを切って塩を振っただけのものを毎日作ってみる。それがうまくできるようになったら、トマトときゅうりを切ってサラダにしてみる。それも慣れてきたらサラダとは別に肉を焼いてみたり、ご飯も炊いてみたりする。そこまできたらついに献立を考えて朝昼晩の食事を作ってみる、というように@<ttb>{意識してゆっくりと難易度を上げていく}必要があります。

高すぎる目標だけ立てて挫折してしまわないよう、次のようにまずは毎日一文を書くところからはじめて、それができたら一段落、次は一記事、最後に複数記事がまとまったドキュメントというように段階的にできるようになっていきましょう。

 1. 句点（。）までの一文を書いてみる（50文字以内）
 2. 複数の文を繋げて一段落を書いてみる（150文字程度）
 3. 複数の段落で構成された一記事を書いてみる（1000文字程度）
 4. 複数の記事で構成されたドキュメントを書いてみる

=== 全部並べていちばんよい一文を早く見つける

「ここの文章、いまいち分かりにくいから直したいんだけど、どうしようかな」と悩みながら書き足したり、消したり、少し言い回しを変えたり、前後を入れ替えたり……いやいややっぱりさっきの方がよかったかも、と元に戻したり……という流れに心当たりはありませんか？

こんなふうにいちばんよい一文を探してああでもないこうでもないと長時間悩んでしまう人には、@<ttb>{たくさんのパターンを並べて書いて、その中から最善案を見つける}という方法がお勧めです。

たとえば「メッセージ送信で文字数の上限が100文字から200文字に変更された」ということをつたえる文章を書きたいとき、初案として次のような一文を書いたとします。

//cmd{
メッセージ送信で文字数の上限が200文字に変わりました
//}

初案を書いたあなたは、この初案だと「メッセージ送信」が「メッセージ」と「送信」という2つの名詞を組み合わせた合成語になってしまっているな、と気付きます。実際に「メッセージ送信」というボタンがある訳ではないので、ここはメッセージ送信じゃなくて助詞を入れた「メッセージの送信」にしよう、と思ったあなたは、次のようにさっと書き換えてみました。

//cmd{
メッセージの送信で文字数の上限が200文字に変わりました
//}

これが長時間悩んでしまうダメなパターンです。書き換えてしまうと初案と第2案の比較ができません。まだ初案と第2案の2つくらいなら自分がどこを変えたのかや原型はなんだったのかを覚えていられますが、ここからあれこれ悩みながら書き足したり、消したり、少し言い回しを変えたり、前後を入れ替えたりしていると、「え、さっきいいなって思ったのはどれだったっけ？」と分からなくなってしまう未来が待っています。

いちばんよい一文を考えるときは、ヒストリーと差分が見えるように直前の案をコピーペーストしながら書き換えて、全部の案を並べていきましょう。このとき自分ひとりで考えるのもいいですが、誰かに付き合ってもらってオンラインミーティングで画面共有をしながら書いていくと、改善の螺旋階段を上がっていく速度が急激に速くなり、ものの5分くらいで「これにしよう！」といういちばんよい一文に辿りつけます。

//cmd{
1. メッセージ送信で文字数の上限が200文字に変わりました
2. メッセージの送信で文字数の上限が200文字に変わりました
3. メッセージを送信する際の文字数の上限が200文字に変わりました
4. メッセージとして送れる文字数の上限が200文字になりました
5. メッセージで送れる文字数の上限が200文字になりました
6. メッセージの送信で文字数の上限が200文字に緩和されました
7. メッセージの送信時に指定できる文字数の上限が200文字になりました
8. メッセージとして送信できる文字数の上限が200文字に変更されました
9. 送信できるメッセージの文字数が最大100文字から200文字に変更されました
10. 送信できるメッセージの文字数が最大100文字から200文字に変更されました
//}

併せてそれぞれの案に数字を振っておくこともお勧めします。比較対象が2つくらいなら「上の方が分かりやすい」とか「私は下の方がいいと思う」で済みますが、3つ以上になったときに「上からえーっと……4つめのやつよりは、その下の下のやつがいいと思う」みたいになって混乱します。案を並べて書きながらそれぞれに数字を振っておくことで、「4がいいと思う」「4よりは6の方が分かりやすい」のように、他の人につたえやすくなります。

===[column] 【コラム】変わっていく語感を拾おう

いま、若い世代に「1時間弱は何分ぐらいのことか？」と聞くと、「1時間が60分で、1時間とちょびっとだから70分くらい？」と答えるそうです。まさかと思って息子に聞いたら、たしかにこれとまったく同じように答えたのでちょっと驚きました。

その理屈でいくと1時間強は何分になるのかと聞いたところ、「1時間とたくさんだから、85分くらいとか？」らしいです。なるほど。同じ理屈で大さじ1杯弱についても「大さじ1杯プラスちょっと」だと思っていたとのこと。息子が作ってくれるだし巻き玉子が、いつも味が濃いめな理由が分かりました。

本来の意味はそれぞれつたえておいたけれど、こういう「口に出さずに脳内で起きている誤解」は周囲も気付かないので解くのが難しいものです。もちろん言葉の意味は辞書に載っていますが、その言葉から受け取る「こんな感じかな」という語感は、人や世代によって移り変わっていきます。

たとえば学校で先生に当てられて答えを言ったとき、途中で先生から「はい。結構です」と止められたら、「回答に満足しました。そこまでで十分ですよ」というプラスの意味で受け取るか、「もういいです。それ以上聞きたくありません」というマイナスの意味で受け取るかは、人や世代によってかなり異なると思います。

「誤解して受け取る側が悪いので、言葉の意味をちゃんと勉強してください」と憤る気持ちも分かりますが、誤解している人が2割、3割と増えていってもなお、書き手が頑なにその存在を無視し続けるのはよくないと思っています。前述のようなケースであれば、誤解している人が若い世代に多いと分かった時点で、「1時間弱というのは、1時間より少し短いという意味です」というような補足を入れてあげるか、曖昧な言い方をやめて「45分から60分」のように誤解されない説明にしましょう。

===[/column]

== 再利用しやすい文章にする

社内Wikiで書いた文章を社外ブログに流用したり、登壇用に作った発表原稿をドキュメントで使ったり、文章は何かしらの形で再利用されることがあります。そんなときに再利用しやすい文章の書き方があります。

=== 文章と修飾を分けて書こう

WordPressのようなCMSやMicrosoft Wordなどで書かれた文章は、文章そのものと「見出し」や「太字」といった修飾が分かちがたく一体化しているため、再利用する際の再加工に手間がかかります。

可能であればMarkdown@<fn>{markdown}やRe:VIEW@<fn>{review}などを使って、最初から@<ttb>{プレーンテキストで文章と修飾を分けて書いておく}ことで、別の環境に引っ越すときや文章を再利用するときに書き直す労力が少なくて済みます。

//footnote[markdown][文章を書くための軽量マークアップ言語のひとつ。オリジナルのMarkdownの他に、拡張されたMarkdown方言が存在する。たとえばGitHubのコメントなどで使えるMarkdownも方言の1つ。]
//footnote[review][Re:VIEW（リビュー）とは、Re:VIEWの記法に沿ってテキストの原稿を書き、コマンドをたたくと書籍として組版されたPDFやEPUBが生まれてくる素晴らしいツール。本書もRe:VIEWで書かれています。詳しく知りたい方は「技術書をかこう！ ～はじめてのRe:VIEW～ 第3版」という書籍がお勧めです。 @<href>{https://techbooster.booth.pm/items/5231699}]

=== 並列はナカグロ（・）で書かない

文章の中で並列を表そうとして「ホーム・検索・マイページ・ヘルプのタブは非表示にできません」のようにナカグロ（・）を使っていると、再利用されて箇条書きになったときに、次のような見た目になることがあります。

//cmd{
着せかえの設定時、以下の機能は非表示にしたり、見た目を変更したりできません。

・ホーム・検索・マイページ・ヘルプのタブ
・トレンドワード機能
・ID連携機能
//}

並列を表す場合は最初から箇条書きにしておくか、文章の中で書く場合は読点（、）を使用することをお勧めします。

=== タイトルは「概要」か「○○の概要」か

たとえばShops APIというAPIのドキュメントを書くとき、概要のページのタイトルをただの「概要」にすべきか、それとも「Shops APIの概要」にすべきか、迷うことがあります。

概要のページはShops APIというカテゴリの下にあるので、ただの「概要」でも上位のカテゴリ名を見れば補完されて「ああ、Shops APIの概要なんだな」と分かります。それにいちいち全部のページのタイトルで「Shops APIの概要」や「Shops APIの開発ガイドライン」や「Shops APIの制限事項」というように同じ名前を連呼するのはいささか冗長にも感じます。

ですが、いちいち上位のカテゴリ名を見なければ、何の概要だか分からないというのは不便なものです。また、いまは概要のページがShops APIというカテゴリの下にあっても、今後ドキュメントの構造が変わってすべてのAPIが一目で把握できるように各APIの概要だけが1つの階層に集められてしまう可能性もあります。そのときにもしタイトルがただの「概要」になっていたら、すべてのタイトルを「○○の概要」に書き直さなければいけなくなります。

どちらも一長一短ではありますが、筆者はページのタイトルだけを見て分かるようにしてあげたいのと、他のドキュメントから当該ページへのリンクを張るときにリンクテキストが「概要」だけよりは「Shops APIの概要」になっていた方が分かりやすいと思うので、「Shops APIの概要」にする派です。

=== リンクテキストを「こちら」にしない

「詳しくはこちらをご覧ください」や「利用規約はこちら」のように、リンク先を表すリンクテキストを「こちら」にしているケースはよく見ます。

ですが、リンクテキストを「こちら」にしていると、再利用するためにコピーした文章をプレーンテキストとして貼り付けた結果、そもそもここでリンクしていた先はどこだったのかという情報が失われて、まったく分からなくなってしまうことがあります。

また「@<code>{詳しくは[Shops APIのAPIリファレンス](/BankCodeAPI/reference/)をご覧ください}」と書いてあれば、「Shops APIのAPIリファレンスにリンクしているはずなのに、リンク先が間違って金融機関コードAPIになっているようだ」と気付くことができますが、「@<code>{詳しくは[こちら](/BankCodeAPI/reference/)をご覧ください}」だと、そもそもどこにリンクすべきだったのかという仕様を把握している人以外はリンク先が間違っていることには気付けません。

読み手にとっても、リンクを実際に開いてみるまでどこに飛ばされるのかが分からないため、そのリンクを開くべきか開かなくてもよさそうかが判断できません。

リンクテキストは安易に「こちら」にせず、「詳しくはShops APIの開発ガイドをご覧ください」のように、リンク先のページやコンテンツの名前を書くようにしましょう。

== 技術文書に特有のコツ

技術に関する文章を書くときに特有のコツがいくつかあります。

=== 正しい名前で呼ぼう

ソフトウェアやハードウェアの名称は、自分がなんとなく使っている通称や誤った表記ではなく、正しい名称で書くようにしましょう。（@<table>{nameCorrect}）

//table[nameCorrect][通称や誤記ではなく正しい表記で書こう]{
通称や誤記	正しい名称
------------------------------------
VSCode	Visual Studio Code
Github	GitHub
Word Press	WordPress
JAVAScript	JavaScript
iphone	iPhone
//}

多少でも名前が間違っていると読者も混乱しますし、間違えられた側も決していい気分はしません@<fn>{nameWrong}。細かいことではありますが、名前が間違っていると「この人はこの技術をちゃんと理解しているのだろうか？」と思われてしまい、文章そのものに対する信頼度も下がります。特にスペースの有無や大文字小文字などは意識していても間違えやすいので、筆者は公式サイトや公式ドキュメントの表記をコピーペーストして使うようにしています。

//footnote[nameWrong][以前所属していた会社でMVPとして壇上に呼ばれた際、社長に名前を間違えられて「表彰相手の名前くらいは把握しておいてもらえると嬉しい……」と思ったことがあります。相手に興味がなくてもいいのですが、それを悟らせても得るものは何もないので、せめて興味があるように見える最低限の準備は大事だなと思います。]

また英数字の羅列だと覚えにくいけれど何の略なのか分かれば理解しやすくなる、という側面もありますので@<ttb>{はじめは正式名称で紹介して、以降は略称にする}という形もよいでしょう。読み方が分からずにひそかに悩んでしまう@<fn>{k8s}のも初心者あるあるですので、次のようにカタカナで読み仮名も添えるとなお親切です。

//footnote[k8s][k8sはKubernetesの略でクバネティスと読むとか、nginxと書いてエンジンエックスと読むとか、誰かに教えてもらわないと筆者は想像もつかなかったです。密かに「んぎっくす…？」と思っていました。]

//cmd{
AWSではサーバはAmazon Elastic Compute Cloudの略で「EC2」（イーシーツー）と呼ばれています。
//}

=== 年月日や対象バージョンを書いておこう

書いたドキュメントは、本人が書いたことを忘れるくらい時間が経ってから突然参照されることがあります。その際、「いつ書かれたものか」という情報がないと、読み手は非常に古い情報をいま現在の仕様だと思って読んでしまう可能性がありますので、文章を書くときは必ず「その文章が書かれた年月日」を記載しておきましょう。

ブログであれば、その記事を投稿した年月日が自動で表示されるようにしておきましょう@<fn>{classmethod}。技術書であれば奥付@<fn>{okuduke}に書いておけばよいですが、それ以外に文中でも「今年の技術書典」や「5月26日の技術書典」ではなく「2024年5月26日(日)の技術書典」のように、@<ttb>{数年経ってからその文章を読んでもいつのことを指しているのか分かるようにしておく}とさらによいでしょう。

//footnote[classmethod][クラスメソッドさんのDevelopersIOは、1年以上前の記事には「この記事は公開されてから1年以上経過しています。情報が古い可能性がありますので、ご注意ください。」という案内が表示されるところが素晴らしいなと思います。]
//footnote[okuduke][書籍や雑誌の巻末にある著者名・発行者・発行年月日などが書かれている部分。本書にもあります。]

またミドルウェアやソフトウェアであれば、@<ttb>{どのバージョンを対象とした内容なのか}も記載しておきましょう。

=== 例示用のIPアドレスやドメイン名を使おう

たとえば「ブラウザでwww.example.comを開くと、名前解決が行なわれてウェブサーバの203.0.113.222というIPアドレスが返ってきます」というように、技術の説明をしていると具体的なIPアドレスやドメイン名を書きたくなることがあります。このようなときは@<ttb>{例示用のIPアドレスやドメイン名を使いましょう}。

実はインターネットでは「例示やテストで使っていいIPアドレスやドメイン名」というものが定められています@<fn>{rfc}。

例として記載するURL、メールアドレスなどでは次のものをつかいましょう。

//footnote[rfc][例示用のIPアドレスはRFC5737、ドメイン名はRFC2606やJPRSのサイトで確認できます。]

 * 例示として使えるIPアドレス
 ** 192.0.2.0/24（192.0.2.0～192.0.2.255）
 ** 198.51.100.0/24（198.51.100.0～198.51.100.255）
 ** 203.0.113.0/24（203.0.113.0～203.0.113.255）
 * 例示として使えるドメイン名
 ** example.com
 ** example.net
 ** example.co.jp
 ** example.jp

例示であっても自分の持ち物でないIPアドレスやドメイン名を勝手に使うことはトラブルの元になります@<fn>{trouble}。必ず例示用のIPアドレスやドメイン名を使いましょう。

//footnote[trouble][実際にどんなトラブルになるのか？は「DNSをはじめよう」という書籍の「4.4.4 ＜トラブル＞ test@test.co.jp を使って情報漏洩」で紹介しています。]

=== リンクは「張る」ものか「貼る」ものか

リンクは「張る」ものでしょうか、それとも「貼る」ものでしょうか？@<fn>{link}

//footnote[link][リンクを「はる」は「張る」 – 毎日ことばplus @<href>{https://salon.mainichi-kotoba.jp/archives/50189}]

URLを誰かに教えてあげるためにコピーして貼り付けるときなら、「Slackのチャンネルに興味深い記事のURLを貼る」のように「貼る」を使うのがいいでしょう。これは他の人に「こういう記事があったよ」と知らせるために、URLの書かれた紙を壁に糊で貼って掲示しているイメージです。

一方、「商品一覧から詳細ページにリンクを張る」のような場合は「張る」を使います。これは蜘蛛がこちらからあちらへ糸を張るように、いま見ているページから別のページへと繋ぐ糸を張っているイメージです。
