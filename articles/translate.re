= 英語を書くとか翻訳するとか

英語ができない日本語話者のエンジニアが、なんとか頑張って英語をひねり出したときにやりがちな失敗と、書いた文章が変な言い回しになっていないか確認する方法を紹介します。

== 単語と単語の間にはスペースが1つ必要

たとえば@<ttb>{You can use this API to get weather information}という英文を見ると分かるように、単語と単語の間にはスペースが1つ入ります。英語が不得手な人でも、そこまではなんとなく認識できていると思います。

ですが、括弧やカンマやピリオドといった記号が入ると、この@<ttb>{単語と単語の間にはスペースが1つ入る}という原則を忘れがちです。たとえば、以下のような自己紹介文を書いてしまったことはありませんか？

//cmd{
mochiko(nickname)
Living in Japan(Tokyo)
Presented at Tech Seminar vol.22,vol.23
Loves : Flutter,Nuxt.js,Kubernetes
//}

この自己紹介文は、どれも単語と単語の間にはスペースが1つ入るという原則を守れていません。重要なのは@<ttb>{記号はスペースの代わりにはならない}ということです。間違いに気付くため、括弧やカンマやピリオドといった記号を消してみましょう。

//cmd{
mochikonickname
Living in JapanTokyo
Presented at Tech Seminar vol22vol23
Loves  FlutterNuxt.jsKubernetes
//}

あちこちで単語が繋がってしまったり、逆にスペースが2つ続いてしまったりしています。では単語と単語の間に1つだけスペースを入れた上で記号を元に戻して、正しい英文に直してみましょう。

//cmd{
mochiko (nickname)
Living in Japan (Tokyo)
Presented at Tech Seminar vol. 22, vol. 23
Loves: Flutter, Nuxt.js, Kubernetes
//}

できました！括弧書きの手前には半角スペースが入りますし、volumeの略である@<ttb>{vol.}と数字の間や、区切り文字であるカンマの後ろにもスペースが入ります。逆に@<ttb>{Loves}とコロンの間にあったスペースはなくなりました。

これは日本語話者が英語を書いたときに非常によくやる失敗@<fn>{roman}です。

//footnote[roman][かくいう私もよくこの失敗をしていましたが、同僚が「日本人が英語でやりがちな失敗 / Common mistakes in English that Japanese people tend to make」というイベントで説明してくれてようやく理解できました。感謝！ @<href>{https://www.youtube.com/watch?v=2nXUkXmFfZI&t=943s}]

== 単語や文の単位で翻訳すると危ない

OSSなどで英語を日本語訳するとき、前後の文脈や原文で言いたいことを汲まずに単語や文の単位で翻訳すると、おかしな日本語になることがあります。たとえば、AWSが提供している日本語のドキュメント@<fn>{awsDoc}に、以前こんな一文がありました。

//footnote[awsDoc][チュートリアル: Amazon EC2 Linux インスタンスの開始方法 @<href>{https://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/EC2_GetStarted.html}]

//cmd{
インスタンスを削除するということは、実質的には、そのインスタンスを削除するということです。いったん終了したインスタンスに再接続することはできません。
//}

削除するということは、実質的には削除するということ……進次郎構文@<fn>{shinjiro}みたいになっています。どうしたのでしょうか。

//footnote[shinjiro][「今のままではいけないと思います。だからこそ、日本は今のままではいけないと思っている」のように前半と後半で同じことを繰り返す謎構文のこと。 @<href>{https://dic.nicovideo.jp/a/%E9%80%B2%E6%AC%A1%E9%83%8E%E6%A7%8B%E6%96%87}]

原文と思われる英語@<fn>{original}を当たってみると、どうやらTerminateとDeleteを両方とも「削除」と訳したことで生まれてしまった悲しい翻訳文だったようです。

//footnote[original][Tutorial: Get started with Amazon EC2 Linux instances @<href>{https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EC2_GetStarted.html}]

//cmd{
Terminating an instance effectively deletes it;
you can't reconnect to an instance after you've terminated it.
//}

「インスタンス」はAWSにおけるサーバのことです。なので恐らく原文はこう言いたかったのだろう、という意図を汲んで日本語にすると、「サーバの『終了』とは、単に電源を落とすシャットダウンではなく、サーバそのものを『削除』してしまうことを意味します。そのため『終了』させたサーバには二度と接続できないので注意してください」という注意喚起の文章だったのではないかと思われます。@<fn>{startAWS}

//footnote[startAWS][AWS？インスタンス？その辺をもっと詳しく教えてくれ！と思ったら「AWSをはじめよう 改訂第2版 ～AWSによる環境構築を1から10まで～」をどうぞ。 @<href>{https://booth.pm/ja/items/1032590}]

Terminateを英和辞典で引くと「終わらせる」「解除する」という訳が出てきます。「Terminating an instance」で「インスタンスを終わらせる」ということなら、確かに「インスタンスを削除する」と訳してもおかしくはありません。もう1つのDeleteも「削除する」「消す」なので、どちらも「正しく」訳した結果、「削除するということは、実質的には削除するということ」という進次郎構文が生まれてしまったのだと推察しています。

この注意喚起文によって何を食い止めたかったのか、という背景や意図を理解せず、単に単語や文の単位で「正しく」翻訳すると、こんなふうに実際は意味を為さない文が生まれてしまうことがあります。

== 前後の文脈やどこで使われるのかを知らずに翻訳はできない

とても簡単な英語を「正しく」翻訳しても、おかしくなってしまうことがあります。たとえば「Take Me Home」を「私を家に連れて行って」と訳すのは、英語がそこまで得意でない人が見ても恐らく正しいと思うはずです。

ですが、これがアプリでログアウトした後の画面に表示されていたらどうでしょう？（@<img>{logout}）

//image[logout][ログアウト画面][scale=1]{
//}

恐らく「Take Me Home」の訳は、「ホームに戻る」が適切だったはずです。その文章がどこに配置されるのか分からずに訳すと、やはり「正しい」のにとても違和感のあるUI文言になってしまうことがあります。@<fn>{kfc}

//footnote[kfc][実在した事例です。ただこういう翻訳を見ると、ひどい訳だと笑う前に、もはや日本が「丁寧に翻訳するコストをかけるほどの市場規模じゃない」と相手にされていない可能性を考えてしまってうーん……。 @<href>{https://twitter.com/mochikoAsTech/status/1779009150426767775}]

== 翻訳はもとの言いたいことに立ち返って考える

英語から日本語に翻訳するとき、あるいは英語から日本語に翻訳するときに、原文をしっかり読んでも誤訳してしまうことがあります。

もともと頭の中に何か「言いたいこと」があって、そこから原文が生まれているので、原文になった時点で情報量は減っています。JPEGのように、文章として保存されるたびに情報量は減衰していくので、元の「言いたいこと」に立ち返らずに、情報量の減った原文だけを読んで翻訳すると、原文から翻訳文になるときさらに情報量が減衰します。そして文章としての体を為すためにその減衰を補おうとして、もとの「言いたいこと」にはなかった想像や嘘が混ざることがあります。（@<img>{damping}）

//image[damping][言いたいことを書いたり翻訳したりすると情報量が減衰していく][scale=1]{
//}

元々言いたかったことと、実際に発露した文章はイコールではなく、そこには必ず差分があります。翻訳するときは、原文を書いた人に意図や背景や、元の言いたかったことを質問して、できるだけ元の「言いたいこと」に立ち返って訳しましょう。

== 技術文書の翻訳に必須なのは英語力や文章力よりも技術力

前述のとおり、OSSや技術書など英語から日本語に翻訳する場合、元の「言いたいこと」や前後の文脈を汲めるかどうかが重要です。そのため、ことITの分野においては翻訳に必須な力は対象技術の知識、実際に触ったことがある深度の深い理解であって、日本語の文章力や、英語の文章力はその次だと個人的には考えています。もし技術力はあっても、英語が不得手だからとOSSの翻訳協力に尻込みをしていたら、ぜひ一歩踏み出してみてください。

翻訳する人は「文脈が分かっている」と非常に強いです。そもそも何の話か分かっているから、原文が多少説明不足でも元の「言いたいこと」を推察してピントの合った訳ができます。

ドキュメントや技術書を翻訳するとき、英語が読めても「何を言っているのか」が分からないと、文法があっているだけで正しいことを何も伝えない、きれいで誤った翻訳文になってしまいます。

== スペルミスが心配ならATOKに頼ろう

筆者は自分が記憶している英単語のスペルや意味にまったく自信がないので、ATOK@<fn>{atok}という有償の日本語入力システムを使っています。

//footnote[atok][Windows、Mac、iOS、Androidに対応。ATOK Passportプレミアムなら月600円（税抜き）で最大10台までインストールできる。登録している単語や自分の入力のクセなどが複数台のPCとスマホですべて同期されるので非常に便利。 @<href>{https://atok.com/}]

ATOKは、たとえば「ほうこくはいじょうです」という入力を、「報告は以上です」という漢字とかなが交ざった文に変換する部分を担うツールです。もともとWindowsやMacにはデフォルトでMicrosoft IMEなどのIME@<fn>{ime}が入っていますが、性能や精度はそこそこなので、平気で「報告は異常です」といった意図しない変換をかましてきます。ストレスなく文章を書くための投資だと思って、その辺りの変換が非常に賢いATOKにお金を払うと思っていた以上のリターンが得られます。

//footnote[ime][Input Method Editorの略。英語であれば物理キーボードに書かれた文字を直接叩くことで文字が入力できるが、日本語のようにすべての文字に対応するキーがあるわけではない言語では、このIMEという入力システムを使って変換することで文字入力を行っている。]

ATOKは日本語を入力するときにも便利なのですが、英語を書くときにもしっかりサポートしてくれます。たとえばATOKで「ろくがつ」と入力すると、変換結果に「June」（@<img>{june}）が出てきます。あるいは「ひつよう」や「ねせさりー」と入力すると、「necessary」が出てきます。

//image[june][日本語を入力すると変換候補に英語も出てくる][scale=0.6]{
//}

また単語の意味や使い方を確認したいときは、調べたい言葉を選択してctrlキーを2回押すことで、すぐに広辞苑、大辞林、ウィズダム英和辞典、ウィズダム和英辞典といった最新の辞書が引けます。（@<img>{confidence}）

//image[confidence][単語を選んでctrlキーを2回叩くと辞書が引ける][scale=0.6]{
//}

人間はミスをする生き物なので、自信のない分野は積極的にツールに頼りましょう。お金かかるのはちょっと嫌なので毎回ネットで検索すればいいや、と思っていても、ちょっとした面倒くささを乗り越えて毎回調べるのは大変なので結局やらなくなってしまう可能性が高いです。生産性のためによいキーボードやよいチェアを選ぶように、ぜひよいIMEを使いましょう。

== 例は「ex.」ではなく「e.g.」

日本だと例示（Example）の略でex.って書く人が多いけど、exだと「前の彼女」を「ex-girlfriend」って言ったりするときの「前の」の意味なのでe.g. の方がよさそう。

== 機械翻訳があれば英語がまったく分からなくても訳せるか

機械翻訳もChatGPTも、しれっと真逆の意味に翻訳したり、間の文章を一文落としてきたり、逆に2回繰り返して訳してきたりする。

機械翻訳はあくまで電動自転車みたいなもので、自力で漕げないときには乗れない（＝乗ると事故るので乗ってはいけない）。

== 翻訳しづらい文章をやめよう

なんか言ってるけど、実際のところ何も言っていない、翻訳しづらい文章はやめよう。
