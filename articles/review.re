= よいレビューの仕方とされ方

自分が書いた文章をレビューしてもらったり、誰かの書いた文章をレビューしたりするときに、双方が相手に歩み寄って気持ちよくレビューが進められる方法を紹介します。

//pagebreak

== レビュアー（レビューする側）のコツ

文章のレビューという工程において、レビュアー（レビューする側）とレビュイー（レビューしてもらう側）の共通目的は「@<ttb>{これをもっとよい文章にして早く世に出すこと}」です。レビュアーの本来の目的は、決して「間違いの多い低品質な文章だったとレビュイーに自覚させること」や「強い言葉でレビュアーを傷つけて反省させること」ではありません。文章を読んで指摘をするレビュアーがこんなことに気をつけると、指摘を受け止めるレビュイーとよいコミュニケーションがとれますよ、というコツを紹介していきます。

=== 重要度合いを添えて指摘のコメントをしよう

レビューでの指摘は「文章をよりよいものにする」ものであると同時に、相手（レビュイー）のやることを増やすものでもあり、一歩間違えると公開を遅らせるブロッカーになり得ます。

レビュアーは軽い気持ちで指摘したのにレビュイーは「これを全部直さないと公開できないんだ……」と思い込んでしまい、必要以上にコストをかけて全部を直すことになった、というようなすれ違いは非常に勿体ないものです。

これを防ぐため、筆者がドキュメントや技術書のレビューをするときは、レビューコメントに以下のような「重要度」を添えています。

 * @<ttb>{MUST FIX}
 ** 仕様の明らかな誤りなど、重大な問題があるため絶対に直してほしいもの
 * @<ttb>{Nice-to-have}
 ** 絶対ではないが直した方がよくなるので、できれば直してほしいもの
 * @<ttb>{Nitpicking}
 ** 軽微な誤りや好みの問題なので、直さなくても構わないが気になったもの

重要度を添えることによって、レビュイーは「早く公開することが最優先なのでMUST FIXだけ対応しよう」や「〆切まで時間があるし、読みやすくすること最優先にして全部丁寧に対応していこう」というように、どこまで対応するのかを判断しやすくなります。

自分がレビュイーのときは「指摘されたら迷わず即直す」という姿勢でもいいのですが、一方でどれだけ直しても、もう指摘するところが1つも見つからない「完璧で完全無欠な文章」というものが存在しないのも事実です。

どんないい文章でも、次の日に読み直せばさらに何かしら直せる箇所は見つかります。レビュイーが「完璧な文章以外はここを通さないぞ！」と思っていると、指摘する→直す→指摘する→直す→指摘する→直す……というループがいつまでも終わらず、よっていつまでもその文章を世に出すことができません。

レビュアーが指摘をするのは自由ですが、@<ttb>{指摘を取り込むか否かというオーナーシップはその文章を書いた人にあります}。そして文章は、世に出なければ多くの人の目に触れてもっと多くの指摘を受ける、という機会も得られないままです。「俺の意見を全部聞け！細かいものも含めて全部直すまで世に出すことは許さんぞ！」ではなく、MUST FIX以外はレビュイーの判断を信じて、自分が必要以上のブロッカーにならないように気をつけましょう。

=== どう直すべきかを具体的に書こう

レビュアーは、自分がした指摘が「具体的にどう直すべきか」が読み取れない指摘になっていないか、あるいは文章をよくすることではなく相手を傷つけることを目的とした攻撃になっていないか気をつけましょう。

「具体的にどう直すべきか」が読み取れない指摘というのは、たとえば次のようなものです。

 * 仕様理解が足りていないようです
 * ここ、もうちょっと分かりやすくなりませんか？
 * ○○の説明に怪しいところがあります
 * この説明だと誤解させるので直してほしいです

これらの指摘は「直してほしいようだ」ということは分かりますが、具体的に仕様のどこを理解できていないのか、何がどう分かりにくかったのか、「説明の怪しいところ」とはいったいどこで正しくはどう書くべきなのか、読み手に何を誤解させそうだと感じたのか、などが分かりません。

本来は、文章を書いたレビュイーも、それを読んで指摘したレビュアーも、共通して「もっとよい文章に早く辿り着きたい」、つまり今が6階に居るとしたら早く完成度100%の10階に行きたい、という目的があるはずです。であれば、レビュイーが「直すべきということは伝わってきたけど、具体的にどう直したらいいのか分からない……」と6階で延々と考え込んでしまって時間を無為に使うのは、レビュアーにとっても嬉しいことではないはずです。

「具体的にどう直すべきか」が読み取れない指摘は、家でビールを飲みながら野球を観戦している人の「お前、ほんとヘボピッチャーだな！」「なんで打てないんだよ、バカ！」みたいな野次に近いものがあります。レビュイーもレビュアーも、本来は同じグラウンドで共に勝利を追い求めるチームメイトのはずです。レビュアーは野次を飛ばす観客ではないので、ぜひ具体的な修正提案をしてあげましょう。

お勧めは変更をPull request上で提案できるSuggestion機能@<fn>{suggestion}を使うことです。

//footnote[suggestion][@<href>{https://docs.github.com/ja/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/commenting-on-a-pull-request}]

「A is B」って書いてあるけれどAはCなのでこれは明確な誤りだな、と思ったら「AはBではありません」とコメントするのではなく、次のようなSuggestionを書いてあげることで、レビュイーに対してどう直すべきかが過不足なく伝わると共に、レビュイーはワンクリックで修正提案を取り込むことができます。

//cmd{
[MUST FIX]
AはBじゃなくてCです。

```suggestion
A is C
```
//}

レビューでもらった修正提案（suggestion）をレビュイーが取り込む@<fn>{changes}ときは、Pull requestのFiles changedのタブで@<code>{[Add suggestion to batch]}をクリックしていって、全部Addし終わったら、最後に@<code>{[Commit suggestions]}をクリックします。

//footnote[changes][@<href>{https://docs.github.com/ja/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/incorporating-feedback-in-your-pull-request}]

Suggestionを使うとas-isに対してto-beを明確に提示できて、相手の修正にかかるコストも下げられるので、とってもお勧めです。逆にどう直すべきかという具体案は思いつかないけど、「分かりにくいよ！」という気持ちだけ伝えたい、というときは、前述のように重要語がNitpickingであることを書き添えた上で「こういう風に自分は分かりにくいと感じたけど、具体的な代替案は思いつかなかった」と気持ちだけ伝えてもいいでしょう。

=== レビューは「相手のやることを増やす」責任を持って伝えよう

「分かりにくいです」と感想をつたえるだけのレビューや、直した方がより良くなるかもしれない箇所を増やすだけ指摘は簡単です。逆に「これで大丈夫！」と責任を持ってゴーサインを出す方がずっと難しいことです。

書いてある内容についてレビュアーがきちんと理解していれば「あとこれだけが足りない」「ここは明確に間違っているので○○に直しましょう」がはっきり言えます。ですが、あまり理解していない状態で「レビュアーなんだからなにか言わないと……」と指摘をひねり出そうとすると、「できればこれも書いておいた方が分かりやすいんじゃないでしょうか」と無責任に宿題を増やすだけの人になってしまいます。

レビュイーがなんとかその宿題をこなして、再レビューに出すとまたレビュアーから新しい思いつきを言われて、一体何をクリアしたらこれを通過させられるのか分からない……という無限レビューに迷いこんでしまうと、レビュイーの心は簡単に折れてしまいます。@<fn>{comment}

//footnote[comment][作品を持ち込んでは編集者にダメ出しされることの繰り返しで、何をどう直したら編集会議を通過して掲載されるのか分からない……と心が折れてしまった漫画家や小説家の話を読むと、ジャンルは全然違うけどたぶん同じような状態なんだろうなと思ってしまいます。]

レビューをするとき、レビュアーは、その修正指示が「早く世に出る」という価値を毀損してまで、いまやるべきことなのかを自分にきちんと問いましょう。

レビューには「文章をよくする」といういい面だけでなく、「相手（レビュイー）のやることを増やす」「早く出るという価値を損なう」というように足を引っ張る面もあります。なんでもかんでも気軽に放言せず、私は今から相手のやることを増やすのだ！公開を遅らせてでもここは直した方が絶対にいいんだ！という責任を持って指摘をつたえるか、前述のような重要度を添えて取り込む取り込まないを相手が選べるようにしてあげましょう。

=== 大量に赤を入れることがレビュアーの存在意義ではない

稀に、レビューを頼まれたときに「たくさん赤を入れないと仕事をしたことにならない」と思ってしまうレビュアーがいます。そういう思い込みのままレビューをすると、「たくさん指摘をすること」が最優先になっているため、文章をよくするためのレビューのはずなのに、逆に誤りを混入させるような修正指示や、簡潔で分かりやすい文章を長ったらしく曖昧にさせるような逆効果の提案をしてしまいます。

大量に赤を入れることがレビュアーの存在意義ではありません。繰り返しになりますが、よい文章を早く世に出すことがレビュアーとレビュイーの共通目的であると心得ましょう。

レビューで指摘するところが少なかった、ということは、「レビュアーが仕事をしていない」ということを意味しません。レビュイーが書いた元の文章の出来がすごくよかったのかもしれないし、レビュアーの方が知識が不足していて誤りを見つけられていないだけかもしれません。

どちらにせよ、指摘することが少なかったときに、粗探しをして無理矢理指摘をひねり出す必要はありません。何か指摘をひねり出そうとせず、素直に「分かりやすく書けていたので修正して欲しいところはほとんどありませんでした。気づいたことはこれだけです」と伝えてレビュー結果をレビュイーに渡しましょう。

=== 指摘は基本的に「後出しじゃんけん」だと心得る

文章のあら探しをするのは簡単です。なんでこんな書き方になってるんだろう、何を思ってこういう説明にしたんだろう、と憤る前に、「色んな事情があって、当時はこうとしか書けなかったのかもしれない」「おそらくこれが書いたときの精一杯だったので、立場の違う今の自分が馬鹿にしても何もいいことはない」と落ち着きましょう。

他の人が書いた技術記事に対して「もっとこうすればよかった」「技術的に誤りがある」と指摘するのは、基本的に後だしじゃんけんです。あなたが0から書いていたら、もっと別の誤りを仕込んでいたかもしれないし、そもそも書けずに挫折していたかもしれません。レビュアーは初稿を書いた人よりも、そもそも優位な立場であることを自覚したうえで指摘をすべきです。

直すべきところだけでなく、「ここは素晴らしく分かりやすい説明だ！」と思ったところに、「この説明がすごく分かりやすい！」というポジティブなフィードバックも一緒にしてみましょう。それによってレビュイーは「あ、ここの書き方どうするか迷ってたけど、分かりやすいと思ってもらえたなら次もこの書き方を採用しよう」という判断ができます。

=== 頼まれていないレビューはしない

人には間違えて素っ転んで痛い思いをする権利があります。そこにあるのが読み手にとって取り返しのつかないような危険な間違いで、誰がどう見てもMUST FIXなものであり、こちらから修正案も提供できる、というものでなければ、頼まれてもいない勝手なレビューはするべきではありません。

誰かが書いた文章を読んで「こんな粗悪な技術記事を出すなんて」と思ったのであれば、それとは関係なくあなたが正しい内容の記事を書いて、正しい技術知識を世に広めればいいだけの話です。0から何かを書くことを放棄して、代わりに誰かが書いた1に対して文句をつけるだけの人になるのはやめましょう。

野球選手になって試合に出るまでの労力と、その試合を見て外野から「バッティングがなっちゃいない！下手くそ！」と野次を飛ばす労力であれば、どちらの方が大変だかは分かるはずです。野次を飛ばしたくなったら、あなたも選手になって試合に出ましょう。

=== 方針を決めるのは別の機会にする

指摘された箇所の修正についてレビュアーとレビュイーの間で折り合いが付かないと、レビューの工程がお互いにとってつらく苦しいものになってしまうことがあります。

こういうときはこう書きましょう、というライティングのスタイルガイドやルールが存在していて、そこ既に決まっているものであれば意見は割れません。ですが、まだルールや方針が決まっていないものについて意見が割れ、さらにレビュアーのA案もレビュイーのB案もそれぞれメリットデメリットがあって一概に「こっちが正解だ！絶対にこっちの書き方の方がいい！」と言えないときは、どう直すのかなかなか両者間で折り合いがつきません。

方針を決めないと直せない、直せないといつまでもリリースできない、でも方針がなかなか決まらない、という状態は非常に苦しいです。そこでお勧めは「@<ttb>{方針を決めるのは別の機会にする}」という方法です。

組織の中で「レビューの観点を相談して方針を決める会」を毎月の繰り返し予定で入れておき、日々のレビュー指摘の中で「これ、そういえばどうするかという方針が決まってなかったね」というものが出てきたら、次回の議題に入れて「いったんこれは現行のままで行きましょう。次回の方針を決める会で方針が決まったら別途対応しましょう」とします。

これによってルールや方針が決まっていなくて意見が割れるものがあったとき、決まるまで進めなくて苦しくなっていたのが、次回の議題に積んでおいてさっとリリースに進めるようになります。

方針が決まっていないのでそのうち話しましょうという口約束をして忘れないように気をつける、というやり方だとつい忘れてしまいます。しっかり議題に積んでおくことで、次の「方針を決める会」まではこの話題を忘れてもいい、というように安心して棚上げができるようになります。

== レビュイー（レビューされる側）のコツ

レビュアーが様々な配慮をしながらレビューをしてくれると、レビュイーもそれぞれの指摘に真摯に向き合えるようになります。

=== お願いしたい観点を添えてレビューを依頼しよう

どういう観点でレビューしてもらいたいのか、何についてどれくらいの粒度で指摘をして欲しいのか、という認識がレビュアーとレビュイーの間で合致していないと、「ざっと見て欲しいだけだったのに、頼んでもいない細かいところまで何度も指摘されて、時間もかかり嫌な思いをした」とか「すごくたくさん指摘するところがあってこちらも大変だったのに、言い訳ばかりされて結局全然直してもらえなかった」という地獄のような状態が生まれます。

レビューを頼むときは以下のように、どんな観点で何について指摘をして欲しいのか、あるいはどういう観点の指摘は不要なのか、といった情報をレビュアーへきちんとつたえるようにしましょう。

 * 技術仕様に誤りがないか
 * 想定している読者層に向けて分かりやすい構成になっているか
 * 日本語として明らかなてにおはの誤りがないか
 * より分かりやすくするためにできることがないか
 * 他の人が書いた章と文体が揃っているか
 * 不足している情報がないか
 * 説明に不親切なところがないか

逆にレビュアーはレビューを依頼された際、観点や粒度についての情報がなければ確認をしてからレビューを始めるようにしましょう。

=== 指摘は素直に受け入れる

先日、「突然画力が伸びだした時、僕が発見した事」というnote@<fn>{note}を読みました。内容をざっくりまとめると、絵を描いている途中で「あ、ここおかしいから直した方がいいな」と思う箇所を見つけたときに、人間の習性なのか、素直にさっと直さずに「もう〆切まであんまり時間もないし」「ここまで割とうまく描けてるし、下手に直すといまより悪くなるかも」のように、なんとかして直さないで済む理由を見つけてそのままでいきたくなってしまう。けれどその気持ちをぐっと押し込めてすぐに直すようにしたら画力が伸びた、というものでした。

//footnote[note][note版 突然画力が伸びだした時、僕が発見した事｜安倍吉俊｜note @<href>{https://note.com/abfly/n/n04a315114fcd}]

これを読んだ筆者は「絵もライティングもおんなじだな」と思いました。

うんうん唸りながらやっと書き上げたドキュメントや技術ブログに、指摘のコメントをもらうと、その瞬間、「指摘してもらってありがたいな」という気持ちと同時に、「いやいやこういう風に書いた意図があるので、ここはこのまま直したくないです」という気持ちが湧き上がります。もちろん明らかな間違いであればすぐに直しますが、「そこはどっちでもよくない？好みの問題では？」というときは特に、指摘されたことを直すべきか、直さずにそのままでいくべきか、迷ってしまう人は多いのではないかと思います。

筆者も含め、レビュイーはレビュアーからの指摘を見ると、なんだかんだ言い訳をして取り込まない方向に持っていきたくなる習性がありますが、そういうときは次の2つに時間をかけるのをやめて、指摘されたらさっと直すようにしてみてください。

 1. 指摘されたことを直すか直さないか迷う
 2. なんとか直さず済ませるために相手を説得する

筆者はこの方法を試してみた結果、60%の完成度の文章を、80%とか100%に持っていく速度が速くなって、前よりも文章を書くのうまくなりました。

指摘された瞬間は「えー、今のままでいいじゃん！直したくないなー！」と心から思うんですが、直した結果、「やっぱり直さなきゃよかった」と思うことは基本的にありません。お風呂に入る前は面倒くさいと思っていても、入った後に「入らなきゃよかった」とは絶対にならないのとよく似ています。「直したくないな」と思っていても、直すとちゃんと前よりよい文章になることの方が圧倒的に多いのです。

=== レビュアーが気付いたことに、書いたとき気付かないのは当然

レビュアーは文章を読むだけなので、リソースの100%を「注意深く読むこと」に使えます。

一方、書く側は「情報全体を把握し」「どうつたえるか考え」「キーボードを叩いて文章を組み立てながら」「読み返し」「修正案を再び考え」「どちらがよいか判断する」というように、リソースを思考や判断、出力といった様々な作業に振り分けています。

わらわらと10人いる幼児の面倒を同時並行で見なければいけない保育士と、1人だけにつきっきりになれる保育士だったら、それは後者の方が「襟元にカレーのシミがあるな」とか「昨日より少し元気がない」とか色んなことに気付けるはずです。

レビュイーはレビュアーから指摘を読んで、「俺はなぜ……これを書いたときに気付かなかったんだ……こんなにはっきり間違えているのに……」と己の目の節穴さに落ち込む必要はありません。使えるリソースが違うので、レビュアーが気付いたことに、書いた時点で気付かないのはある意味当然と言えます。

逆に言えば、書いた時点ですべての誤りに気づけるのであれば、レビューという工程自体が不要なはずです。

みんなの頭の中にふわふわとしたアイデアがあるだけで、「書かれた文章」がないと、その文章をもっと良くすることもできません。完璧でなくても下書きレベルでも、そこに文章があったからこそ、それを元にレビューができてもっといい文章に直すことができました。

レビュアーが誤りを拾えたということは、元をたどればレビュイーが最初の文章を書き上げたということであり、そしてその後のレビューという工程がしっかり機能しているということなので、お互いに「えらい！」「えらい！」と言い合ってみんなで喜びましょう。

レビュアーのときは誤りに気付くし、書いているときは気付かない。これはもうそういうものなのです。
